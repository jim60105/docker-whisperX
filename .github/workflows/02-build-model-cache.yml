# Build model cache workflow
# This workflow builds the Whisper model cache images for all supported models
name: "02-build-model-cache"

on:
  workflow_run:
    workflows: ["01-build-base-images"]
    types: [completed]

# Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.
permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY_IMAGE: ${{ github.repository_owner }}/whisperx

jobs:
  # Build model cache in parallel across multiple platforms
  build_cache:
    runs-on: ${{ matrix.runner }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        model:
          - tiny
          - base
          - small
          - medium
          - large-v3
          - distil-large-v3
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: cache-${{ matrix.model }}

      - name: Get no_model digest from triggering workflow
        id: get-base-digest
        run: |
          # Get the triggering workflow run information
          WORKFLOW_RUN_ID="${{ github.event.workflow_run.id }}"
          
          # Get the no_model digest from the artifacts or outputs
          # For now, we'll use the latest no_model image with the same commit SHA
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c 1-7)
          
          # Use the no_model image with short SHA tag
          NO_MODEL_IMAGE="ghcr.io/jim60105/whisperx:no_model-$SHORT_SHA"
          echo "no_model_image=$NO_MODEL_IMAGE" >> $GITHUB_OUTPUT

      - name: Build and push by digest (cache-${{ matrix.model }})
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./Dockerfile
          target: load_whisper
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.setup.outputs.labels }}
          build-args: |
            WHISPER_MODEL=${{ matrix.model }}
            NO_MODEL_STAGE=${{ steps.get-base-digest.outputs.no_model_image }}
            VERSION=${{ github.event.workflow_run.head_sha }}
            RELEASE=${{ github.event.workflow_run.run_number }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-model-${{ matrix.model }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-model-${{ matrix.model }},mode=max
          outputs: |
            type=image,name=ghcr.io/${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          sbom: true
          provenance: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          platform="${{ matrix.platform }}"
          platform_safe="${platform//\//-}"
          echo "${digest#sha256:}" > "/tmp/digests/${platform_safe}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-cache-${{ matrix.model }}-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Test model cache builds by pulling from registry
  test_cache:
    runs-on: ${{ matrix.runner }}
    needs: build_cache
    strategy:
      fail-fast: false
      matrix:
        model:
          - tiny
          - base
          - small
          - medium
          - large-v3
          - distil-large-v3
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          name: digests-cache-${{ matrix.model }}-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          path: /tmp/digests

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test pull cache-${{ matrix.model }} image
        run: |
          cd /tmp/digests
          digest=$(cat linux-*)
          echo "Testing pull of cache-${{ matrix.model }} for platform ${{ matrix.platform }}"
          docker pull --platform ${{ matrix.platform }} ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest
          echo "Successfully pulled cache-${{ matrix.model }} image for ${{ matrix.platform }}"

  # Merge all platform builds into manifest list for each model cache
  merge_cache:
    runs-on: ubuntu-latest
    needs: test_cache
    strategy:
      matrix:
        model:
          - tiny
          - base
          - small
          - medium
          - large-v3
          - distil-large-v3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-cache-${{ matrix.model }}-*
          merge-multiple: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: cache-${{ matrix.model }}

      - name: Create GHCR manifest list
        run: |
          echo "Creating manifest list for cache-${{ matrix.model }}..."
          cd /tmp/digests
          echo "Files in /tmp/digests:"
          ls -la
          echo "Building digest references..."
          digest_refs=""
          for file in linux-*; do
            if [[ -f "$file" ]]; then
              digest=$(cat "$file")
              echo "Processing $file with digest: $digest"
              digest_refs+="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest "
            fi
          done
          echo "Final digest references: $digest_refs"
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<$DOCKER_METADATA_OUTPUT_JSON) \
            $digest_refs

      - name: Get final manifest digest
        id: get_digest
        run: |
          # Get the digest of the manifest list we just created
          IMAGE_TAG=$(jq -cr '.tags[0]' <<<$DOCKER_METADATA_OUTPUT_JSON)
          DIGEST=$(docker buildx imagetools inspect "$IMAGE_TAG" --format "{{.Manifest.Digest}}")
          echo "manifest_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Attest GHCR image (cache-${{ matrix.model }})
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/whisperx
          subject-digest: ${{ steps.get_digest.outputs.manifest_digest }}
