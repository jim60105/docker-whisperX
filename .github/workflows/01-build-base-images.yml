# Build base images workflow
# This workflow builds the ubi-no_model and no_model base images
name: "01-build-base-images"

on:
  workflow_run:
    workflows: ["docker_publish"]
    types: [completed]

# Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.
permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY_IMAGE: ${{ github.repository_owner }}/whisperx

jobs:
  # Build the ubi-no_model in parallel across multiple platforms
  build_ubi:
    runs-on: ${{ matrix.runner }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Prepare platform variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: ubi-no_model

      - name: Build and push by digest (ubi-no_model)
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./ubi.Dockerfile
          target: no_model
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.setup.outputs.labels }}
          build-args: |
            VERSION=${{ github.event.workflow_run.head_sha }}
            RELEASE=${{ github.event.workflow_run.run_number }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-${{ env.PLATFORM_PAIR }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-${{ env.PLATFORM_PAIR }},mode=max
          outputs: |
            type=image,name=ghcr.io/${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          sbom: true
          provenance: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${digest#sha256:}" > /tmp/digests/${{ env.PLATFORM_PAIR }}

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-ubi-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Test ubi-no_model on amd64 platform only (for performance)
  test_ubi:
    runs-on: ubuntu-latest
    needs: build_ubi
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: ubi-no_model

      - name: Download build digests
        uses: actions/download-artifact@v4
        with:
          name: digests-ubi-linux-amd64
          path: /tmp/test-digests

      - name: Pull test image from registry
        id: pull
        run: |
          # Get the digest for amd64 platform
          DIGEST=$(cat /tmp/test-digests/linux-amd64)
          IMAGE_REF="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:${DIGEST}"
          echo "Pulling image: $IMAGE_REF"
          docker pull "$IMAGE_REF"
          # Tag the image for easier reference in tests
          docker tag "$IMAGE_REF" "test-image:ubi-no_model"
          echo "imageid=test-image:ubi-no_model" >> $GITHUB_OUTPUT

      - name: Test ubi-no_model docker image
        run: |
          docker run --group-add 0 -v ".:/app" ${{ steps.pull.outputs.imageid }} -- --model base --language en --device cpu --compute_type int8 --output_format srt .github/workflows/test/en.webm;
          if [ ! -f en.srt ]; then
            echo "The en.srt file does not exist"
            exit 1
          fi
          echo "cat en.srt:";
          cat en.srt;
          if ! grep -qi 'no' en.srt; then
            echo "The en.srt file does not contain the word 'no'"
            exit 1
          fi
          echo "Test passed."

  # Merge all platform builds into manifest list for ubi-no_model
  merge_ubi:
    runs-on: ubuntu-latest
    needs: [build_ubi, test_ubi]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-ubi-*
          merge-multiple: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: ubi-no_model

      - name: Create GHCR manifest list
        run: |
          echo "Creating manifest list for GHCR..."
          cd /tmp/digests
          echo "Files in /tmp/digests:"
          ls -la
          echo "Building digest references..."
          digest_refs=""
          for file in linux-*; do
            if [[ -f "$file" ]]; then
              digest=$(cat "$file")
              echo "Processing $file with digest: $digest"
              digest_refs+="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest "
            fi
          done
          echo "Final digest references: $digest_refs"
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<$DOCKER_METADATA_OUTPUT_JSON) \
            $digest_refs

      - name: Get final manifest digest
        id: get_digest
        run: |
          # Get the digest of the manifest list we just created
          echo "Available GHCR tags:"
          jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON
          IMAGE_TAG=$(jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON | head -n1)
          echo "Using tag for digest lookup: $IMAGE_TAG"
          DIGEST=$(docker buildx imagetools inspect "$IMAGE_TAG" --format "{{.Manifest.Digest}}")
          echo "manifest_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Attest GHCR image (ubi-no_model)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/whisperx
          subject-digest: ${{ steps.get_digest.outputs.manifest_digest }}

  # Build the no_model in parallel across multiple platforms
  build_no_model:
    runs-on: ${{ matrix.runner }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Prepare platform variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps

      - name: Build and push by digest (no_model)
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./Dockerfile
          target: no_model
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.setup.outputs.labels }}
          build-args: |
            VERSION=${{ github.event.workflow_run.head_sha }}
            RELEASE=${{ github.event.workflow_run.run_number }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-${{ env.PLATFORM_PAIR }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ env.REGISTRY_IMAGE }}:cache-${{ env.PLATFORM_PAIR }},mode=max
          outputs: |
            type=image,name=ghcr.io/${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          sbom: true
          provenance: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${digest#sha256:}" > /tmp/digests/${{ env.PLATFORM_PAIR }}

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-no_model-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Test no_model on amd64 platform only (for performance)
  test_no_model:
    runs-on: ubuntu-latest
    needs: build_no_model
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps

      - name: Download build digests
        uses: actions/download-artifact@v4
        with:
          name: digests-no_model-linux-amd64
          path: /tmp/test-digests

      - name: Pull test image from registry
        id: pull
        run: |
          # Get the digest for amd64 platform
          DIGEST=$(cat /tmp/test-digests/linux-amd64)
          IMAGE_REF="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:${DIGEST}"
          echo "Pulling image: $IMAGE_REF"
          docker pull "$IMAGE_REF"
          # Tag the image for easier reference in tests
          docker tag "$IMAGE_REF" "test-image:no_model"
          echo "imageid=test-image:no_model" >> $GITHUB_OUTPUT

      - name: Test no_model docker image
        run: |
          docker run --group-add 0 -v ".:/app" ${{ steps.pull.outputs.imageid }} -- --model base --language en --device cpu --compute_type int8 --output_format srt .github/workflows/test/en.webm;
          if [ ! -f en.srt ]; then
            echo "The en.srt file does not exist"
            exit 1
          fi
          echo "cat en.srt:";
          cat en.srt;
          if ! grep -qi 'no' en.srt; then
            echo "The en.srt file does not contain the word 'no'"
            exit 1
          fi
          echo "Test passed."

  # Merge all platform builds into manifest list for no_model
  merge_no_model:
    runs-on: ubuntu-latest
    needs: [build_no_model, test_no_model]
    outputs:
      digest: ${{ steps.get_digest.outputs.manifest_digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-no_model-*
          merge-multiple: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps

      - name: Create GHCR manifest list
        run: |
          echo "Creating manifest list for GHCR..."
          cd /tmp/digests
          echo "Files in /tmp/digests:"
          ls -la
          echo "Building digest references..."
          digest_refs=""
          for file in linux-*; do
            if [[ -f "$file" ]]; then
              digest=$(cat "$file")
              echo "Processing $file with digest: $digest"
              digest_refs+="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest "
            fi
          done
          echo "Final digest references: $digest_refs"
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<$DOCKER_METADATA_OUTPUT_JSON) \
            $digest_refs

      - name: Get final manifest digest
        id: get_digest
        run: |
          # Get the digest of the manifest list we just created
          echo "Available GHCR tags:"
          jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON
          IMAGE_TAG=$(jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON | head -n1)
          echo "Using tag for digest lookup: $IMAGE_TAG"
          DIGEST=$(docker buildx imagetools inspect "$IMAGE_TAG" --format "{{.Manifest.Digest}}")
          echo "manifest_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Attest GHCR image (no_model)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/whisperx
          subject-digest: ${{ steps.get_digest.outputs.manifest_digest }}
