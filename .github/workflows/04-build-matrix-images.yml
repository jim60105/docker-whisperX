# Build matrix images workflow
# This workflow builds the full matrix of Docker images and runs tests
name: "04-build-matrix-images"

on:
  workflow_run:
    workflows: ["02-build-model-cache"]
    types: [completed]

# Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.
permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY_IMAGE: ${{ github.repository_owner }}/whisperx

# The following languages are excluded because these transcribe model are too large to build on the GitHub Actions
# https://github.com/jim60105/docker-whisperX/actions/runs/8405597972
# - no
# - nn

jobs:
  # Build matrix images for tiny and base models
  build_matrix_1:
    runs-on: ${{ matrix.runner }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        lang:
          - en
          - fr
          - de
          - es
          - it
          - ja
          - zh
          - nl
          - uk
          - pt
          - ar
          - cs
          - ru
          - pl
          - hu
          - fi
          - fa
          - el
          - tr
          - da
          - he
          - vi
          - ko
          - ur
          - te
          - hi
          - ca
          - ml
          - sk
          - sl
          - hr
          - ro
          - eu
          - gl
          - ka
          - lv
          - tl
        model:
          - tiny
          - base
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: ${{ matrix.model }}-${{ matrix.lang }}

      - name: Get base image references
        id: get-refs
        run: |
          # Get the commit SHA from the triggering workflow
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c 1-7)
          
          # Set image references
          NO_MODEL_IMAGE="ghcr.io/jim60105/whisperx:no_model-$SHORT_SHA"
          CACHE_IMAGE="ghcr.io/jim60105/whisperx:cache-${{ matrix.model }}-$SHORT_SHA"
          
          echo "no_model_image=$NO_MODEL_IMAGE" >> $GITHUB_OUTPUT
          echo "cache_image=$CACHE_IMAGE" >> $GITHUB_OUTPUT

      - name: Build and push by digest (${{ matrix.model }}-${{ matrix.lang }})
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./Dockerfile
          target: final
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.setup.outputs.labels }}
          build-args: |
            WHISPER_MODEL=${{ matrix.model }}
            LANG=${{ matrix.lang }}
            LOAD_WHISPER_STAGE=${{ steps.get-refs.outputs.cache_image }}
            NO_MODEL_STAGE=${{ steps.get-refs.outputs.no_model_image }}
            VERSION=${{ github.event.workflow_run.head_sha }}
            RELEASE=${{ github.event.workflow_run.run_number }}
          outputs: |
            type=image,name=ghcr.io/${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          sbom: true
          provenance: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          platform="${{ matrix.platform }}"
          platform_safe="${platform//\//-}"
          echo "${digest#sha256:}" > "/tmp/digests/${platform_safe}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.model }}-${{ matrix.lang }}-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Build matrix images for small, medium and large-v3 models
  build_matrix_2:
    runs-on: ${{ matrix.runner }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        lang:
          - en
          - fr
          - de
          - es
          - it
          - ja
          - zh
          - nl
          - uk
          - pt
          - ar
          - cs
          - ru
          - pl
          - hu
          - fi
          - fa
          - el
          - tr
          - da
          - he
          - vi
          - ko
          - ur
          - te
          - hi
          - ca
          - ml
          - sk
          - sl
          - hr
          - ro
          - eu
          - gl
          - ka
          - lv
          - tl
        model:
          - small
          - medium
          - large-v3
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: ${{ matrix.model }}-${{ matrix.lang }}

      - name: Get base image references
        id: get-refs
        run: |
          # Get the commit SHA from the triggering workflow
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c 1-7)
          
          # Set image references
          NO_MODEL_IMAGE="ghcr.io/jim60105/whisperx:no_model-$SHORT_SHA"
          CACHE_IMAGE="ghcr.io/jim60105/whisperx:cache-${{ matrix.model }}-$SHORT_SHA"
          
          echo "no_model_image=$NO_MODEL_IMAGE" >> $GITHUB_OUTPUT
          echo "cache_image=$CACHE_IMAGE" >> $GITHUB_OUTPUT

      - name: Build and push by digest (${{ matrix.model }}-${{ matrix.lang }})
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./Dockerfile
          target: final
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.setup.outputs.labels }}
          build-args: |
            WHISPER_MODEL=${{ matrix.model }}
            LANG=${{ matrix.lang }}
            LOAD_WHISPER_STAGE=${{ steps.get-refs.outputs.cache_image }}
            NO_MODEL_STAGE=${{ steps.get-refs.outputs.no_model_image }}
            VERSION=${{ github.event.workflow_run.head_sha }}
            RELEASE=${{ github.event.workflow_run.run_number }}
          outputs: |
            type=image,name=ghcr.io/${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          sbom: true
          provenance: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          platform="${{ matrix.platform }}"
          platform_safe="${platform//\//-}"
          echo "${digest#sha256:}" > "/tmp/digests/${platform_safe}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.model }}-${{ matrix.lang }}-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Test matrix images builds by pulling from registry (selective testing)
  test_matrix:
    runs-on: ${{ matrix.runner }}
    needs: [build_matrix_1, build_matrix_2]
    strategy:
      fail-fast: false
      matrix:
        # Only test a subset to save resources - focus on medium-zh for compatibility
        include:
          - lang: zh
            model: medium
            platform: linux/amd64
            runner: ubuntu-latest
          - lang: en
            model: tiny
            platform: linux/amd64
            runner: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ matrix.model }}-${{ matrix.lang }}-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          path: /tmp/digests

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test pull ${{ matrix.model }}-${{ matrix.lang }} image
        run: |
          cd /tmp/digests
          digest=$(cat linux-*)
          echo "Testing pull of ${{ matrix.model }}-${{ matrix.lang }} for platform ${{ matrix.platform }}"
          docker pull --platform ${{ matrix.platform }} ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest
          echo "Successfully pulled ${{ matrix.model }}-${{ matrix.lang }} image for ${{ matrix.platform }}"

  # Merge all platform builds into manifest lists for each model-lang combination
  merge_matrix:
    runs-on: ubuntu-latest
    needs: test_matrix
    strategy:
      fail-fast: false
      matrix:
        lang:
          - en
          - fr
          - de
          - es
          - it
          - ja
          - zh
          - nl
          - uk
          - pt
          - ar
          - cs
          - ru
          - pl
          - hu
          - fi
          - fa
          - el
          - tr
          - da
          - he
          - vi
          - ko
          - ur
          - te
          - hi
          - ca
          - ml
          - sk
          - sl
          - hr
          - ro
          - eu
          - gl
          - ka
          - lv
          - tl
        model:
          - tiny
          - base
          - small
          - medium
          - large-v3
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.model }}-${{ matrix.lang }}-*
          merge-multiple: true

      - name: Setup docker
        id: setup
        uses: ./.github/workflows/docker-reused-steps
        with:
          tag: ${{ matrix.model }}-${{ matrix.lang }}

      - name: Create GHCR manifest list
        run: |
          echo "Creating manifest list for ${{ matrix.model }}-${{ matrix.lang }}..."
          cd /tmp/digests
          echo "Files in /tmp/digests:"
          ls -la
          echo "Building digest references..."
          digest_refs=""
          for file in linux-*; do
            if [[ -f "$file" ]]; then
              digest=$(cat "$file")
              echo "Processing $file with digest: $digest"
              digest_refs+="ghcr.io/${{ env.REGISTRY_IMAGE }}@sha256:$digest "
            fi
          done
          echo "Final digest references: $digest_refs"
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<$DOCKER_METADATA_OUTPUT_JSON) \
            $digest_refs

      - name: Get final manifest digest
        id: get_digest
        run: |
          # Get the digest of the manifest list we just created
          echo "Available GHCR tags:"
          jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON
          IMAGE_TAG=$(jq -cr '.tags[] | select(startswith("ghcr.io/"))' <<<$DOCKER_METADATA_OUTPUT_JSON | head -n1)
          echo "Using tag for digest lookup: $IMAGE_TAG"
          # Get the raw digest output and extract only the sha256 part
          DIGEST_RAW=$(docker buildx imagetools inspect "$IMAGE_TAG" --format "{{.Manifest.Digest}}")
          echo "Raw digest output: $DIGEST_RAW"
          # Extract only the digest hash, removing any MediaType or other formatting
          DIGEST=$(echo "$DIGEST_RAW" | grep -oE 'sha256:[a-f0-9]{64}' | head -n1)
          echo "Extracted digest: $DIGEST"
          echo "manifest_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Attest GHCR image (${{ matrix.model }}-${{ matrix.lang }})
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/whisperx
          subject-digest: ${{ steps.get_digest.outputs.manifest_digest }}

  # Comprehensive test for medium-zh after merge
  test-medium-zh:
    name: Test medium-zh docker image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: merge_matrix
    steps:
      # We require additional space due to the large size of our image. (~10GB)
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: Checkout
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            .github/workflows/test/**
          sparse-checkout-cone-mode: false

      - name: Get image reference
        id: get-ref
        run: |
          # Get the commit SHA from the triggering workflow
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c 1-7)
          
          # Set image reference
          IMAGE="ghcr.io/jim60105/whisperx:medium-zh-$SHORT_SHA"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Test medium-zh docker image
        run: |
          docker run --group-add 0 -v ".:/app" ${{ steps.get-ref.outputs.image }} -- --device cpu --compute_type int8 --output_format srt .github/workflows/test/zh.webm;
          if [ ! -f zh.srt ]; then
            echo "The zh.srt file does not exist"
            exit 1
          fi
          echo "cat zh.srt:";
          cat zh.srt;
          if ! grep -qi -e '充满' -e '充滿' zh.srt; then
            echo "The zh.srt file does not contain the word '充满' or '充滿'"
            exit 1
          fi
          echo "Test passed."
